{"version":3,"sources":["Button.js","theme.js","useTheme.js","App.js","serviceWorker.js","index.js"],"names":["Button","title","click","React","useState","checkedA","checkedB","state","setState","ButtonColor","S","onClick","checked","onChange","event","target","name","inputProps","styled","div","props","theme","colors","titleColor","Switch","dark","bgColor","navColor","light","useTheme","initTheme","window","matchMedia","matches","localSettingTheme","localStorage","getItem","setTheme","mode","setItem","App","themeMode","toggleTheme","Main","Nav","Div2","Div","GlobalStyle","createGlobalStyle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1368e1fc.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport Switch from '@material-ui/core/Switch';\n\nfunction Button({title, click}) {\n\n    const [state, setState] = React.useState({\n      checkedA: true,\n      checkedB: true,\n    });\n\n    const handleChange = (event) => {\n      setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n    return (\n      <>\n        <ButtonColor><h1>LIGHT</h1></ButtonColor>\n          <S.Button \n            onClick={click}\n            checked={state.checkedA}\n            onChange={handleChange}\n            name=\"checkedA\"\n            inputProps={{ 'aria-label': 'primary checkbox' }}\n          >\n              <h1>{title}</h1>\n          </S.Button>\n        <ButtonColor><h1>DARK</h1></ButtonColor>\n      </>\n    );\n};\n\nexport default Button;\n\n// ----------------------------------------------\n\nconst ButtonColor = styled.div`\n  color: ${props => props.theme.colors.titleColor};  ${'' /* 테마 변경 컬러 지정 */}\n`;\n\nconst S = {};\n\nS.Button = styled(Switch)`\n  margin: 25px 10px 0 10px;\n  width: 300px;\n  height: 70px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  \n  span{\n    font-size: 1.6rem;\n    font-weight: bold;\n  }\n`;","export const dark ={\n    colors:{\n        titleColor : '#121212',\n        bgColor: '#dcdde1',\n        navColor: '#dcdde1'\n    }\n}\n\nexport const light ={\n    colors:{\n        titleColor : 'white',\n        bgColor: '#2f3640',\n        navColor: '#353b48'\n    }\n}","import {useState} from 'react';\n\nexport const useTheme = () => {\n\n    // 브라우저 테마 정보 확인\n    const isBrowserDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    let initTheme = isBrowserDarkMode ? 'dark' : 'light';\n\n    // 사용자가 테마 설정을 직접 지정한 테마가 있는지 확인\n    const localSettingTheme = localStorage.getItem('theme');\n\n    // 지정한 테마가 존재한다면 해당 테마로 설정 없으면 브라우저 기본 설정 테마로 세팅\n    if (localSettingTheme) {\n        initTheme = localSettingTheme;\n    }\n\n    const [theme, setTheme] = useState(initTheme);\n\n    const setMode = mode => {\n        // 테마정보 변경하면 localstorage 에 저장해 다음에도 지정한 값으로 테마가 보이도록 설정\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    };\n\n    const toggleTheme = () => setMode(theme === 'light' ? 'dark' : 'light');\n\n    return [theme, toggleTheme];\n};","import React from 'react';\nimport Button from \"./Button\";\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { dark, light} from \"./theme\";\nimport { useTheme } from \"./useTheme\"; // 환경별 테마 정보 가져오기\n\nfunction App() {\n\n    const [themeMode, toggleTheme] = useTheme();\n    const theme = themeMode === 'light' ? light : dark;\n\n    return (\n      <>\n        <ThemeProvider theme={theme}>\n          <Main>\n            <Nav>\n              <Button\n                title={theme === light ? '일반모드로 테마 변경하기' : '다크모드로 테마 변경하기' }\n                click={toggleTheme}\n              />\n            </Nav>\n            <Div2>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n              <Div><h3>Instagram founders launch COVID-19 dashboard tracking how fast the virus is growing in each state</h3></Div>\n              <Div><h3>iPhone SE vs iPhone XR comparison: Which should you buy?</h3></Div>\n              <Div><h3>Making the Grade: How do you choose between iPad, Chromebook, and laptop?</h3></Div>\n              <Div><h3>Early hands-on videos provide close-up look at new Magic Keyboard with trackpad for iPad Pro</h3></Div>\n              <Div><h3>iPhone SE shipping times slip beyond April 24 launch day delivery and into May</h3></Div>\n            </Div2>\n          </Main>\n          <GlobalStyle />\n        </ThemeProvider>\n      </>\n    );\n}\n\nexport default App;\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    font-family: 'Oswald', sans-serif;\n  }\n`;\n\nconst Main = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: scroll;\n  justify-content: center;\n  ${'' /* align-items: center; */}\n  background-color: ${props => props.theme.colors.bgColor};\n`;\n\nconst Div = styled.div`\n  positon: absolute;\n  margin: 10px 0;\n  font-family: 'Roboto Mono', monospace;\n  max-width: 600px;\n  text-align: center;\n  padding: 10px;\n  border-radius: 5px;\n  border: 5px solid ${props => props.theme.colors.titleColor}; ${'' /* 테마 변경 컬러 지정 */}\n  color: ${props => props.theme.colors.titleColor}; ${'' /* 테마 변경 컬러 지정 */}\n`;\n\nconst Div2 = styled.div`\n  display: flex;\n  position: relative;\n  align-self: flex-start;\n  z-index: 1;\n  top: 50px;\n  height: auto;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Nav = styled.div`\n  z-index: 2;\n  max-width: 620px;\n  display: flex;\n  position: sticky;\n  border-radius: 5px;\n  background-color: ${props => props.theme.colors.navColor}; ${'' /* 테마 변경 컬러 지정 */}\n  border: 8px solid ${props => props.theme.colors.titleColor}; ${'' /* 테마 변경 컬러 지정 */}\n  top: 0;\n  margin: 0 auto;\n  justify-content: center;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}